# server.py

import os
import csv
import uuid
import random
import time
import re
import hmac
import hashlib
import json
from flask import Flask, render_template, request
from flask_socketio import SocketIO, emit, join_room, leave_room
from flask_sqlalchemy import SQLAlchemy
from fuzzywuzzy import fuzz
from glicko2 import Player
from sqlalchemy.pool import NullPool
from urllib.parse import unquote

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PAUSE_BETWEEN_ROUNDS = 10
TYPO_THRESHOLD = 85

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask, SQLAlchemy
basedir = os.path.abspath(os.path.dirname(__file__))
app = Flask(__name__)
app.config['SECRET_KEY'] = 'a_very_secret_key_that_is_long_and_secure'
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL and DATABASE_URL.startswith("postgres://"):
    app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL.replace("postgres://", "postgresql://", 1)
else:
    app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL or 'sqlite:///' + os.path.join(basedir, 'game.db')
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = { 'poolclass': NullPool }
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
socketio = SocketIO(app, async_mode='eventlet', cors_allowed_origins="*")

# --- –ú–æ–¥–µ–ª—å –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö ---
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    telegram_id = db.Column(db.BigInteger, unique=True, nullable=False)
    nickname = db.Column(db.String(80), unique=True, nullable=False)
    rating = db.Column(db.Float, default=1500)
    rd = db.Column(db.Float, default=350)
    vol = db.Column(db.Float, default=0.06)
    games_played = db.Column(db.Integer, default=0, nullable=False)

with app.app_context():
    db.create_all()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
active_games, open_games = {}, {}
lobby_sids = set()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –∑—Ä–∏—Ç–µ–ª–µ–π –∏ —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏—Ö—Å—è ---
def broadcast_lobby_stats():
    players_spectating = sum(len(g.get('spectators', [])) for g in active_games.values())
    players_training = sum(1 for g in active_games.values() if g['game'].mode == 'solo')
    players_in_pvp = sum(len(g['game'].players) for g in active_games.values() if g['game'].mode == 'pvp')

    stats = {
        'players_in_lobby': len(lobby_sids),
        'players_in_pvp': players_in_pvp,
        'players_training': players_training,
        'players_spectating': players_spectating
    }
    socketio.emit('lobby_stats_update', stats)
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –∑—Ä–∏—Ç–µ–ª–µ–π ---
def is_player_busy(sid):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–≥—Ä–∞–µ—Ç –ª–∏ —É–∂–µ
    for game_session in active_games.values():
        if any(p.get('sid') == sid for p in game_session['game'].players.values()):
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑—Ä–∏—Ç–µ–ª—å –ª–∏
        if any(spec['sid'] == sid for spec in game_session.get('spectators', [])):
            return True
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–ª –ª–∏ –∏–≥—Ä—É
    for open_game in open_games.values():
        if open_game['creator']['sid'] == sid:
            return True
    return False
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

def add_player_to_lobby(sid):
    if is_player_busy(sid):
        return
    lobby_sids.add(sid)
    broadcast_lobby_stats()

def remove_player_from_lobby(sid):
    was_in_lobby = sid in lobby_sids
    lobby_sids.discard(sid)
    if was_in_lobby:
        broadcast_lobby_stats()

def load_league_data(filename, league_name):
    clubs_data = {}
    try:
        with open(filename, mode='r', encoding='utf-8') as infile:
            reader = csv.reader(infile)
            for row in reader:
                if not row or len(row) < 2 or not row[0] or not row[1]: continue
                player_name_full, club_name = row[0].strip(), row[1].strip()
                primary_surname = player_name_full.split()[-1]
                aliases = {primary_surname}
                if len(row) > 2:
                    for alias in row[2:]:
                        if alias.strip(): aliases.add(alias.strip())
                valid_normalized_names = {a.lower().replace('—ë', '–µ') for a in aliases}
                player_object = {'full_name': player_name_full, 'primary_name': primary_surname, 'valid_normalized_names': valid_normalized_names}
                if club_name not in clubs_data: clubs_data[club_name] = []
                clubs_data[club_name].append(player_object)
        print(f"[DATA] –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–≥–∏ '{league_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}.")
        return {league_name: clubs_data}
    except FileNotFoundError: print(f"[CRITICAL ERROR] –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏ '{league_name}'."); return {}
    except Exception as e: print(f"[CRITICAL ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename} –¥–ª—è –ª–∏–≥–∏ '{league_name}': {e}"); return {}

all_leagues_data = {}
all_leagues_data.update(load_league_data('players.csv', '–†–ü–õ'))

def update_ratings(p1_user_obj, p2_user_obj, p1_outcome):
    try:
        p1 = Player(rating=p1_user_obj.rating, rd=p1_user_obj.rd, vol=p1_user_obj.vol)
        p2 = Player(rating=p2_user_obj.rating, rd=p2_user_obj.rd, vol=p2_user_obj.vol)
        p2_outcome = 1.0 - p1_outcome
        p1_old_rating_for_calc, p2_old_rating_for_calc = p1.rating, p2.rating
        p1_old_rd_for_calc, p2_old_rd_for_calc = p1.rd, p2.rd
        p1.update_player([p2_old_rating_for_calc], [p2_old_rd_for_calc], [p1_outcome])
        p2.update_player([p1_old_rating_for_calc], [p1_old_rd_for_calc], [p2_outcome])
        p1_user_obj.rating, p1_user_obj.rd, p1_user_obj.vol = p1.rating, p1.rd, p1.vol
        p2_user_obj.rating, p2_user_obj.rd, p2_user_obj.vol = p2.rating, p2.rd, p2.vol
        print(f"[RATING] –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–≤ –æ–±—ä–µ–∫—Ç–∞—Ö). {p1_user_obj.nickname} ({p1_outcome}) -> {int(p1.rating)} vs {p2_user_obj.nickname} ({p2_outcome}) -> {int(p2.rating)}")
        return int(p1.rating), int(p2.rating)
    except Exception as e: print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Glicko: {e}"); return None

def get_leaderboard_data():
    try:
        with app.app_context():
            users_data = db.session.query(User.nickname, User.rating, User.games_played).order_by(User.rating.desc()).limit(100).all()
            leaderboard = [{'nickname': n, 'rating': int(r), 'games_played': g} for n, r, g in users_data]
        return leaderboard
    except Exception as e: print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}"); return []

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ –æ –∑—Ä–∏—Ç–µ–ª—è—Ö ---
def format_spectator_info(spectators):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑—Ä–∏—Ç–µ–ª—è—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    count = len(spectators)
    if count == 0:
        return None
    elif count <= 3:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∫–∏, –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
        names = [spec['nickname'][:10] + ('...' if len(spec['nickname']) > 10 else '') for spec in spectators]
        return f"üëÄ –°–º–æ—Ç—Ä—è—Ç: {', '.join(names)}"
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return f"üëÄ –ó—Ä–∏—Ç–µ–ª–µ–π: {count}"
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –∑—Ä–∏—Ç–µ–ª—è—Ö ---
def broadcast_spectator_update(room_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑—Ä–∏—Ç–µ–ª—è—Ö –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    game_session = active_games.get(room_id)
    if not game_session:
        return
    spectators = game_session.get('spectators', [])
    spectator_text = format_spectator_info(spectators)
    socketio.emit('spectator_update', {'text': spectator_text}, room=room_id)
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

class GameState:
    def __init__(self, player1_info, all_leagues, player2_info=None, mode='solo', settings=None):
        self.mode = mode
        self.players = {0: player1_info}
        if player2_info: self.players[1] = player2_info
        self.scores = {0: 0.0, 1: 0.0}
        min_clubs = 1 if self.mode == 'solo' else 3
        temp_settings = settings or {}
        league = temp_settings.get('league', '–†–ü–õ')
        self.all_clubs_data = all_leagues.get(league, {})
        if not self.all_clubs_data: print(f"[WARNING] –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–≥–∏ '{league}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        max_clubs_in_league = len(self.all_clubs_data)
        default_settings = {'num_rounds': max_clubs_in_league, 'time_bank': 90.0, 'league': league}
        self.settings = settings or default_settings
        selected_clubs = self.settings.get('selected_clubs')
        num_rounds_setting = self.settings.get('num_rounds', 0)
        if selected_clubs and len(selected_clubs) > 0:
            valid_selected_clubs = [c for c in selected_clubs if c in self.all_clubs_data]
            if len(valid_selected_clubs) < min_clubs:
                 print(f"[WARNING] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—É–±–æ–≤ ({len(valid_selected_clubs)}) –¥–ª—è —Ä–µ–∂–∏–º–∞ {self.mode}. –ú–∏–Ω: {min_clubs}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –∫–ª—É–±—ã.")
                 available_clubs = list(self.all_clubs_data.keys())
                 self.num_rounds = len(available_clubs)
                 self.game_clubs = random.sample(available_clubs, self.num_rounds) if available_clubs else []
            else:
                self.game_clubs = random.sample(valid_selected_clubs, len(valid_selected_clubs))
                self.num_rounds = len(self.game_clubs)
        elif num_rounds_setting >= min_clubs:
            available_clubs = list(self.all_clubs_data.keys())
            self.num_rounds = min(num_rounds_setting, len(available_clubs))
            self.game_clubs = random.sample(available_clubs, self.num_rounds) if available_clubs else []
        else:
            print(f"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—É–±–æ–≤ (–º–µ–Ω–µ–µ {min_clubs}), –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–ª—É–±—ã –ª–∏–≥–∏.")
            available_clubs = list(self.all_clubs_data.keys())
            self.num_rounds = len(available_clubs)
            self.game_clubs = random.sample(available_clubs, self.num_rounds) if available_clubs else []
        self.current_round, self.current_player_index = -1, 0
        self.current_club_name, self.players_for_comparison = None, []
        self.named_players_full_names, self.named_players = set(), []
        self.round_history, self.end_reason = [], 'normal'
        self.last_successful_guesser_index, self.previous_round_loser_index = None, None
        time_bank_setting = self.settings.get('time_bank', 90.0)
        self.time_banks = {0: time_bank_setting}
        if self.mode != 'solo': self.time_banks[1] = time_bank_setting
        self.turn_start_time = 0

    def start_new_round(self):
        if self.is_game_over(): return False
        self.current_round += 1
        if len(self.players) > 1:
            if self.current_round == 0: self.current_player_index = random.randint(0, 1)
            elif self.previous_round_loser_index is not None: self.current_player_index = self.previous_round_loser_index
            elif self.last_successful_guesser_index is not None: self.current_player_index = 1 - self.last_successful_guesser_index
            else: self.current_player_index = self.current_round % 2
        else: self.current_player_index = 0
        self.previous_round_loser_index = None
        time_bank_setting = self.settings.get('time_bank', 90.0)
        self.time_banks = {0: time_bank_setting}
        if self.mode != 'solo': self.time_banks[1] = time_bank_setting
        if self.current_round < len(self.game_clubs):
            self.current_club_name = self.game_clubs[self.current_round]
            player_objects = self.all_clubs_data.get(self.current_club_name, [])
            self.players_for_comparison = sorted(player_objects, key=lambda p: p['primary_name'])
        else: return False
        self.named_players_full_names, self.named_players = set(), []
        return True

    def process_guess(self, guess):
        guess_norm = guess.strip().lower().replace('—ë', '–µ')
        if not guess_norm: return {'result': 'not_found'}
        for player_data in self.players_for_comparison:
            if guess_norm in player_data['valid_normalized_names'] and player_data['full_name'] not in self.named_players_full_names:
                return {'result': 'correct', 'player_data': player_data}
        best_match_player, max_ratio = None, 0
        for player_data in self.players_for_comparison:
            if player_data['full_name'] in self.named_players_full_names: continue
            primary_norm = player_data['primary_name'].lower().replace('—ë', '–µ')
            ratio = fuzz.ratio(guess_norm, primary_norm)
            if ratio > max_ratio: max_ratio, best_match_player = ratio, player_data
        if max_ratio >= TYPO_THRESHOLD: return {'result': 'correct_typo', 'player_data': best_match_player}
        for player_data in self.players_for_comparison:
             if guess_norm in player_data['valid_normalized_names']: return {'result': 'already_named'}
        return {'result': 'not_found'}

    def add_named_player(self, player_data, player_index):
        self.named_players.append({'full_name': player_data['full_name'], 'name': player_data['primary_name'], 'by': player_index})
        self.named_players_full_names.add(player_data['full_name'])
        self.last_successful_guesser_index = player_index
        if self.mode != 'solo': self.switch_player()

    def switch_player(self):
        if len(self.players) > 1: self.current_player_index = 1 - self.current_player_index

    def is_round_over(self):
        return len(self.players_for_comparison) > 0 and len(self.named_players) == len(self.players_for_comparison)

    def is_game_over(self):
        if self.current_round >= (self.num_rounds - 1): self.end_reason = 'normal'; return True
        if len(self.players) > 1:
            score_diff = abs(self.scores[0] - self.scores[1])
            rounds_left = self.num_rounds - (self.current_round + 1)
            if score_diff > rounds_left: self.end_reason = 'unreachable_score'; return True
        return False

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ñ–æ –æ –∑—Ä–∏—Ç–µ–ª—è—Ö ---
def get_game_state_for_client(game_session, room_id):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
    game = game_session['game']
    spectators = game_session.get('spectators', [])
    spectator_text = format_spectator_info(spectators)
    return {
        'roomId': room_id, 'mode': game.mode,
        'players': {i: {'nickname': p['nickname'], 'sid': p.get('sid')} for i, p in game.players.items()},
        'scores': game.scores, 'round': game.current_round + 1, 'totalRounds': game.num_rounds,
        'clubName': game.current_club_name, 'namedPlayers': game.named_players,
        'fullPlayerList': [p['full_name'] for p in game.players_for_comparison],
        'currentPlayerIndex': game.current_player_index, 'timeBanks': game.time_banks,
        'spectatorInfoText': spectator_text # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
    }
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

def start_next_human_turn(room_id):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞."""
    game_session = active_games.get(room_id)
    if not game_session: return
    game = game_session['game']
    game.turn_start_time = time.time()
    turn_id = f"{room_id}_{game.current_round}_{len(game.named_players)}"
    game_session['turn_id'] = turn_id
    time_left = game.time_banks[game.current_player_index]
    current_player_nick = game.players[game.current_player_index]['nickname']
    print(f"[TURN] {room_id}: –•–æ–¥ –¥–ª—è {current_player_nick} (–ò–Ω–¥–µ–∫—Å: {game.current_player_index}, –í—Ä–µ–º—è: {time_left:.1f}s)")
    if time_left > 0:
        socketio.start_background_task(turn_watcher, room_id, turn_id, time_left)
    else:
        print(f"[TURN_END] {room_id}: –í—Ä–µ–º—è —É–∂–µ –≤—ã—à–ª–æ –¥–ª—è {current_player_nick}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞.")
        on_timer_end(room_id)
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ, –≤–∫–ª—é—á–∞—è –∑—Ä–∏—Ç–µ–ª–µ–π
    socketio.emit('turn_updated', get_game_state_for_client(game_session, room_id), room=room_id)

def turn_watcher(room_id, turn_id, time_limit):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∂–¥–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ —Ö–æ–¥."""
    socketio.sleep(time_limit)
    game_session = active_games.get(room_id)
    if game_session and game_session.get('turn_id') == turn_id:
        print(f"[TIMEOUT] {room_id}: –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è —Ö–æ–¥–∞ {turn_id}.")
        on_timer_end(room_id)

def on_timer_end(room_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ö–æ–¥–∞ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É –∏–ª–∏ —Å–¥–∞—á–µ."""
    game_session = active_games.get(room_id)
    if not game_session: return
    game = game_session['game']
    loser_index = game.current_player_index
    game.time_banks[loser_index] = 0.0
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    socketio.emit('timer_expired', {'playerIndex': loser_index, 'timeBanks': game.time_banks}, room=room_id)
    if game.mode != 'solo' and len(game.players) > 1:
        winner_index = 1 - loser_index
        game.scores[winner_index] += 1
        game.previous_round_loser_index = loser_index
        game_session['last_round_winner_index'] = winner_index
    if not game_session.get('last_round_end_reason'): game_session['last_round_end_reason'] = 'timeout'
    game_session['last_round_end_player_nickname'] = game.players[loser_index]['nickname']
    print(f"[ROUND_END] {room_id}: –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ '{game_session['last_round_end_reason']}' –∏–≥—Ä–æ–∫–∞ {game.players[loser_index]['nickname']}.")
    show_round_summary_and_schedule_next(room_id)

def start_game_loop(room_id):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã: –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É."""
    game_session = active_games.get(room_id)
    if not game_session: print(f"[ERROR] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã {room_id}"); return
    game = game_session['game']

    if not game.start_new_round():
        # --- –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê ---
        game_over_data = {
            'final_scores': game.scores, 'players': {i: {'nickname': p['nickname']} for i, p in game.players.items()},
            'history': game.round_history, 'mode': game.mode, 'end_reason': game.end_reason, 'rating_changes': None
        }
        print(f"[GAME_OVER] {room_id}: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {game.end_reason}, –°—á–µ—Ç: {game.scores.get(0, 0)}-{game.scores.get(1, 0)}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ –∑—Ä–∏—Ç–µ–ª–µ–π) –≤ –ª–æ–±–±–∏
        for player_index, player_info in game.players.items():
            if player_info.get('sid') and player_info['sid'] != 'BOT' and socketio.server.manager.is_connected(player_info['sid'], '/'):
                 add_player_to_lobby(player_info['sid'])
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑—Ä–∏—Ç–µ–ª–µ–π –≤ –ª–æ–±–±–∏ ---
        spectators = game_session.get('spectators', [])
        for spec in spectators:
             if socketio.server.manager.is_connected(spec['sid'], '/'):
                 add_player_to_lobby(spec['sid'])
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        if game.mode == 'pvp' and len(game.players) > 1:
            print(f"[RATING_CALC] {room_id}: –ù–∞—á–∞–ª–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è PvP.")
            p1_nick, p2_nick = game.players[0]['nickname'], game.players[1]['nickname']
            p1_new_rating, p2_new_rating = None, None
            p1_old_rating, p2_old_rating = 1500, 1500
            with app.app_context():
                try:
                    p1_user, p2_user = User.query.filter_by(nickname=p1_nick).first(), User.query.filter_by(nickname=p2_nick).first()
                    if p1_user and p2_user:
                        p1_old_rating, p2_old_rating = int(p1_user.rating), int(p2_user.rating)
                        print(f"[RATING_CALC] {room_id}: –°—Ç–∞—Ä—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏: {p1_nick}({p1_old_rating}), {p2_nick}({p2_old_rating})")
                        p1_user.games_played += 1; p2_user.games_played += 1
                        print(f"[STATS] {room_id}: –ò–≥—Ä–æ–∫–∞–º {p1_user.nickname} –∏ {p2_user.nickname} –∑–∞—Å—á–∏—Ç–∞–Ω–∞ –∏–≥—Ä–∞.")
                        outcome = 0.5;
                        if game.scores[0] > game.scores[1]: outcome = 1.0
                        elif game.scores[1] > game.scores[0]: outcome = 0.0
                        print(f"[RATING_CALC] {room_id}: –ò—Å—Ö–æ–¥ –¥–ª—è P1 ({p1_nick}): {outcome}")
                        new_ratings_tuple = update_ratings(p1_user_obj=p1_user, p2_user_obj=p2_user, p1_outcome=outcome)
                        if new_ratings_tuple:
                            p1_new_rating, p2_new_rating = new_ratings_tuple
                            print(f"[RATING_CALC] {room_id}: –ù–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ü–û–õ–£–ß–ï–ù–´: {p1_nick}({p1_new_rating}), {p2_nick}({p2_new_rating})")
                        else: print(f"[ERROR][RATING_CALC] {room_id}: –§—É–Ω–∫—Ü–∏—è update_ratings –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏."); p1_new_rating, p2_new_rating = p1_old_rating, p2_old_rating
                        db.session.commit(); print(f"[RATING_CALC] {room_id}: –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∏–≥—Ä—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")
                        game_over_data['rating_changes'] = {'0': {'nickname': p1_nick, 'old': p1_old_rating, 'new': p1_new_rating}, '1': {'nickname': p2_nick, 'old': p2_old_rating, 'new': p2_new_rating}}
                        socketio.emit('leaderboard_data', get_leaderboard_data())
                    else:
                        print(f"[ERROR][RATING_CALC] {room_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ ({p1_nick}, {p2_nick}) –≤ –ë–î.")
                        game_over_data['rating_changes'] = {'0': {'nickname': p1_nick, 'old': p1_old_rating, 'new': p1_old_rating}, '1': {'nickname': p2_nick, 'old': p2_old_rating, 'new': p2_old_rating}}
                except Exception as e:
                    db.session.rollback(); print(f"[ERROR][RATING_CALC] {room_id}: –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
                    game_over_data['rating_changes'] = {'0': {'nickname': p1_nick, 'old': p1_old_rating, 'new': p1_old_rating}, '1': {'nickname': p2_nick, 'old': p2_old_rating, 'new': p2_old_rating}}
        else: print(f"[GAME_OVER] {room_id}: –†–µ–π—Ç–∏–Ω–≥–∏ –Ω–µ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–ª–∏—Å—å (–†–µ–∂–∏–º: {game.mode}, –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}).")

        if room_id in active_games: del active_games[room_id]
        broadcast_lobby_stats() # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã
        socketio.emit('game_over', game_over_data, room=room_id)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ game_over ---
        socketio.close_room(room_id)
        print(f"[GAME_OVER] {room_id}: –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
        return

    # --- –ò–ì–†–ê –ü–†–û–î–û–õ–ñ–ê–ï–¢–°–Ø ---
    print(f"[ROUND_START] {room_id}: –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—É–Ω–¥ {game.current_round + 1}/{game.num_rounds}. –ö–ª—É–±: {game.current_club_name}.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    socketio.emit('round_started', get_game_state_for_client(game_session, room_id), room=room_id)
    start_next_human_turn(room_id)

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—É–∑—ã ---
def show_round_summary_and_schedule_next(room_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–∞—É–∑—ã."""
    game_session = active_games.get(room_id)
    if not game_session: return
    game = game_session['game']
    p1_named_count = len([p for p in game.named_players if p['by'] == 0])
    p2_named_count = len([p for p in game.named_players if p.get('by') == 1]) if game.mode != 'solo' else 0
    round_result = { 'club_name': game.current_club_name, 'p1_named': p1_named_count, 'p2_named': p2_named_count, 'result_type': game_session.get('last_round_end_reason', 'completed'), 'player_nickname': game_session.get('last_round_end_player_nickname', None), 'winner_index': game_session.get('last_round_winner_index') }
    game.round_history.append(round_result)
    print(f"[SUMMARY] {room_id}: –†–∞—É–Ω–¥ {game.current_round + 1} –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥: {round_result['result_type']}")
    game_session['skip_votes'] = set(); game_session['last_round_end_reason'] = None; game_session['last_round_end_player_nickname'] = None; game_session['last_round_winner_index'] = None
    
    pause_end_time = time.time() + PAUSE_BETWEEN_ROUNDS # <-- –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—É–∑—ã

    summary_data = {
        'clubName': game.current_club_name, 'fullPlayerList': [p['full_name'] for p in game.players_for_comparison],
        'namedPlayers': game.named_players, 'players': {i: {'nickname': p['nickname']} for i, p in game.players.items()},
        'scores': game.scores, 'mode': game.mode,
        'pauseEndTime': pause_end_time # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
    }
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    socketio.emit('round_summary', summary_data, room=room_id)
    pause_id = f"pause_{room_id}_{game.current_round}"
    game_session['pause_id'] = pause_id
    socketio.start_background_task(pause_watcher, room_id, pause_id)
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

def pause_watcher(room_id, pause_id):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∂–¥–µ—Ç –ø–∞—É–∑—É."""
    socketio.sleep(PAUSE_BETWEEN_ROUNDS)
    game_session = active_games.get(room_id)
    if game_session and game_session.get('pause_id') == pause_id:
        print(f"[GAME] {room_id}: –ü–∞—É–∑–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
        start_game_loop(room_id)

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏ ---
def get_open_games_for_lobby():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä –¥–ª—è –ª–æ–±–±–∏."""
    open_list = []
    with app.app_context():
        for room_id, game_info in list(open_games.items()):
            creator_user = User.query.filter_by(nickname=game_info['creator']['nickname']).first()
            if creator_user:
                open_list.append({
                    'settings': game_info['settings'],
                    'creator_nickname': creator_user.nickname,
                    'creator_rating': int(creator_user.rating),
                    'creator_sid': game_info['creator']['sid']
                })
            else:
                print(f"[LOBBY CLEANUP] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {game_info['creator']['nickname']} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è—é –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—É—é –∏–≥—Ä—É {room_id}")
                if room_id in open_games: del open_games[room_id]
    return open_list

def get_active_games_for_lobby():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –ª–æ–±–±–∏ (–∑—Ä–∏—Ç–µ–ª–∏)."""
    active_list = []
    for room_id, game_session in active_games.items():
        game = game_session.get('game')
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ PvP –∏–≥—Ä—ã
        if game and game.mode == 'pvp' and len(game.players) == 2:
            active_list.append({
                'roomId': room_id,
                'player1_nickname': game.players[0]['nickname'],
                'player2_nickname': game.players[1]['nickname'],
                'spectator_count': len(game_session.get('spectators', []))
            })
    return active_list

def emit_lobby_update():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∏–≥—Ä –≤—Å–µ–º –≤ –ª–æ–±–±–∏."""
    open_games_list = get_open_games_for_lobby()
    active_games_list = get_active_games_for_lobby()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–µ–º —Å–æ–±—ã—Ç–∏–∏
    socketio.emit('update_lobby', {'open_games': open_games_list, 'active_games': active_games_list})
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.IO ---

@socketio.on('connect')
def handle_connect():
    sid = request.sid
    print(f"[CONNECTION] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {sid}")
    emit('auth_request')

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—á–µ—Ç –∑—Ä–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–µ ---
@socketio.on('disconnect')
def handle_disconnect():
    sid = request.sid
    print(f"[CONNECTION] –ö–ª–∏–µ–Ω—Ç {sid} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    remove_player_from_lobby(sid) # –ü–æ–ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ –ª–æ–±–±–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç–æ–π –∏–≥—Ä—ã
    room_to_delete = next((rid for rid, g in open_games.items() if g['creator']['sid'] == sid), None)
    if room_to_delete:
        del open_games[room_to_delete]
        print(f"[LOBBY] –°–æ–∑–¥–∞—Ç–µ–ª—å {sid} –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ö–æ–º–Ω–∞—Ç–∞ {room_to_delete} —É–¥–∞–ª–µ–Ω–∞.")
        emit_lobby_update() # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–≥—Ä–æ–∫ –ª–∏ –æ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
    player_game_id, opponent_sid = None, None
    game_session_player = None
    disconnected_player_index = -1
    for room_id, game_session in list(active_games.items()):
        game = game_session['game']
        idx = next((i for i, p in game.players.items() if p.get('sid') == sid), -1)
        if idx != -1:
            player_game_id = room_id
            game_session_player = game_session
            disconnected_player_index = idx
            if len(game.players) > 1:
                opponent_index = 1 - idx
                if game.players[opponent_index].get('sid') and game.players[opponent_index]['sid'] != 'BOT':
                    opponent_sid = game.players[opponent_index]['sid']
            break

    if player_game_id and game_session_player:
        game = game_session_player['game']
        disconnected_player_nick = game.players[disconnected_player_index].get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        print(f"[DISCONNECT] –ò–≥—Ä–æ–∫ {sid} ({disconnected_player_nick}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∏–≥—Ä—ã {player_game_id}. –ò–≥—Ä–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.")
        if game.mode == 'pvp' and opponent_sid:
            print(f"[RATING_CALC_DC] {player_game_id}: –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞ –∏–≥—Ä–æ–∫–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥ –ù–ï –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è.")
            if socketio.server.manager.is_connected(opponent_sid, '/'):
                add_player_to_lobby(opponent_sid)
                emit('opponent_disconnected', {'message': f'–°–æ–ø–µ—Ä–Ω–∏–∫ ({disconnected_player_nick}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–∞.'}, room=opponent_sid)
                print(f"[GAME] {player_game_id}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã {opponent_sid}.")
            else: print(f"[GAME] {player_game_id}: –û—Å—Ç–∞–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ {opponent_sid} —Ç–æ–∂–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
        elif game.mode == 'solo':
             print(f"[DISCONNECT] {player_game_id}: –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–æ–±—â–∞–µ–º –∑—Ä–∏—Ç–µ–ª—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤ –ª–æ–±–±–∏ ---
        spectators = game_session_player.get('spectators', [])
        for spec in spectators:
            if socketio.server.manager.is_connected(spec['sid'], '/'):
                emit('opponent_disconnected', {'message': f'–ò–≥—Ä–æ–∫ ({disconnected_player_nick}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'}, room=spec['sid'])
                add_player_to_lobby(spec['sid']) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑—Ä–∏—Ç–µ–ª—è –≤ –ª–æ–±–±–∏
                print(f"[GAME] {player_game_id}: –ó—Ä–∏—Ç–µ–ª—é {spec['nickname']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        if player_game_id in active_games: del active_games[player_game_id]
        socketio.close_room(player_game_id) # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        broadcast_lobby_stats()
        emit_lobby_update() # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
        return # –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑—Ä–∏—Ç–µ–ª–µ–º

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑—Ä–∏—Ç–µ–ª—å –ª–∏ ---
    spectator_game_id = None
    for room_id, game_session in list(active_games.items()):
        spectators = game_session.get('spectators', [])
        if any(spec['sid'] == sid for spec in spectators):
            spectator_game_id = room_id
            # –£–¥–∞–ª—è–µ–º –∑—Ä–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            game_session['spectators'] = [spec for spec in spectators if spec['sid'] != sid]
            print(f"[SPECTATOR] –ó—Ä–∏—Ç–µ–ª—å {sid} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∏–≥—Ä—ã {spectator_game_id}.")
            broadcast_spectator_update(spectator_game_id) # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ –≤ –∏–≥—Ä–µ
            broadcast_lobby_stats() # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            emit_lobby_update() # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã
            break
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


def validate_telegram_data(init_data_str):
    try:
        unquoted_data = unquote(init_data_str); params_list = unquoted_data.split('&'); params_dict = {}
        for item in params_list:
            if '=' in item: key, value = item.split('=', 1); params_dict[key] = value
        sorted_keys = sorted(params_dict.keys()); received_hash = params_dict.get('hash', '')
        data_to_check_list = []; user_data_value = None
        for key in sorted_keys:
            value = params_dict[key]
            if key != 'hash': data_to_check_list.append(f"{key}={value}")
            if key == 'user': user_data_value = value
        data_check_string = "\n".join(data_to_check_list)
        secret_key = hmac.new("WebAppData".encode(), TELEGRAM_BOT_TOKEN.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        if calculated_hash == received_hash:
            if user_data_value: return json.loads(unquote(user_data_value))
            else: print("[AUTH ERROR] –•–µ—à –≤–µ—Ä–Ω—ã–π, –Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'user' –Ω–µ –Ω–∞–π–¥–µ–Ω."); return None
        else: print(f"[AUTH ERROR] –•–µ—à–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–∏! –ü–æ–ª—É—á–µ–Ω: {received_hash}, –í—ã—á–∏—Å–ª–µ–Ω: {calculated_hash}"); return None
    except Exception as e: print(f"[AUTH ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram: {e}"); import traceback; traceback.print_exc(); return None

@socketio.on('login_with_telegram')
def handle_telegram_login(data):
    init_data = data.get('initData'); sid = request.sid
    if not init_data: emit('auth_status', {'success': False, 'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.'}); return
    user_info = validate_telegram_data(init_data)
    if not user_info: emit('auth_status', {'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'}); return
    telegram_id = user_info.get('id')
    if not telegram_id: emit('auth_status', {'success': False, 'message': '–ù–µ—Ç Telegram ID.'}); return
    with app.app_context():
        user = User.query.filter_by(telegram_id=telegram_id).first()
        if user:
            add_player_to_lobby(sid); emit('auth_status', {'success': True, 'nickname': user.nickname})
            emit_lobby_update(); print(f"[AUTH] –ò–≥—Ä–æ–∫ {user.nickname} (TG ID: {telegram_id}, SID: {sid}) –≤–æ—à–µ–ª.")
        else:
            print(f"[AUTH] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (TG ID: {telegram_id}, SID: {sid}). –ó–∞–ø—Ä–æ—Å –Ω–∏–∫–Ω–µ–π–º–∞.")
            emit('request_nickname', {'telegram_id': telegram_id})

@socketio.on('set_initial_username')
def handle_set_username(data):
    nickname = data.get('nickname', '').strip(); telegram_id = data.get('telegram_id'); sid = request.sid
    if not telegram_id: emit('auth_status', {'success': False, 'message': '–û—à–∏–±–∫–∞: –Ω–µ—Ç TG ID.'}); return
    if not nickname or not re.match(r'^[a-zA-Z0-9_-]{3,20}$', nickname): emit('auth_status', {'success': False, 'message': '–ù–∏–∫: 3-20 —Å–∏–º–≤ (–ª–∞—Ç., —Ü–∏—Ñ—Ä—ã, _, -).'}); return
    with app.app_context():
        if User.query.filter_by(nickname=nickname).first(): emit('auth_status', {'success': False, 'message': '–ù–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç.'}); return
        if User.query.filter_by(telegram_id=telegram_id).first(): emit('auth_status', {'success': False, 'message': 'TG ID —É–∂–µ –∑–∞—Ä–µ–≥.'}); return
        try:
            new_user = User(telegram_id=telegram_id, nickname=nickname); db.session.add(new_user); db.session.commit()
            add_player_to_lobby(sid); print(f"[AUTH] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {nickname} (TG ID: {telegram_id}, SID: {sid})")
            emit('auth_status', {'success': True, 'nickname': new_user.nickname}); emit_lobby_update()
        except Exception as e: db.session.rollback(); print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {nickname}: {e}"); emit('auth_status', {'success': False, 'message': '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'})

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---

@socketio.on('request_skip_pause')
def handle_request_skip_pause(data):
    room_id = data.get('roomId'); sid = request.sid
    game_session = active_games.get(room_id)
    if not game_session: print(f"[ERROR][SKIP_PAUSE] {sid} skip –¥–ª—è –Ω–µ —Å—É—â. {room_id}"); return
    game = game_session['game']
    if game.mode == 'solo':
        if game_session.get('pause_id'): print(f"[GAME] {room_id}: –ü—Ä–æ–ø—É—Å–∫ –ø–∞—É–∑—ã (—Å–æ–ª–æ) –æ—Ç {sid}."); game_session['pause_id'] = None; start_game_loop(room_id)
    elif game.mode == 'pvp':
        player_index = next((i for i, p in game.players.items() if p.get('sid') == sid), -1)
        if player_index != -1 and game_session.get('pause_id'):
            game_session['skip_votes'].add(player_index); emit('skip_vote_accepted') # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
            socketio.emit('skip_vote_update', {'count': len(game_session['skip_votes'])}, room=room_id)
            print(f"[GAME] {room_id}: –ì–æ–ª–æ—Å –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç {game.players[player_index]['nickname']} ({len(game_session['skip_votes'])}/{len(game.players)}).")
            if len(game_session['skip_votes']) >= len(game.players):
                print(f"[GAME] {room_id}: –ü—Ä–æ–ø—É—Å–∫ –ø–∞—É–∑—ã (PvP, –≤—Å–µ –≥–æ–ª–æ—Å–∞)."); game_session['pause_id'] = None; start_game_loop(room_id)

@socketio.on('get_leaderboard')
def handle_get_leaderboard(): emit('leaderboard_data', get_leaderboard_data())

@socketio.on('get_league_clubs')
def handle_get_league_clubs(data):
    league_name = data.get('league', '–†–ü–õ'); league_data = all_leagues_data.get(league_name, {})
    club_list = sorted(list(league_data.keys())); emit('league_clubs_data', {'league': league_name, 'clubs': club_list})

@socketio.on('start_game')
def handle_start_game(data):
    sid, mode, nickname, settings = request.sid, data.get('mode'), data.get('nickname'), data.get('settings')
    if not nickname: print(f"[ERROR] –°—Ç–∞—Ä—Ç –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç {sid}"); return
    if is_player_busy(sid): print(f"[SECURITY] {nickname} ({sid}) –∑–∞–Ω—è—Ç, —Å—Ç–∞—Ä—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω."); return
    if mode == 'solo':
        player1_info_full = {'sid': sid, 'nickname': nickname}; room_id = str(uuid.uuid4()); join_room(room_id)
        try:
            game = GameState(player1_info_full, all_leagues_data, mode='solo', settings=settings)
            if game.num_rounds == 0: print(f"[ERROR] {nickname} ({sid}) —Å–æ–ª–æ 0 –∫–ª—É–±–æ–≤."); leave_room(room_id); add_player_to_lobby(sid); emit('start_game_fail', {'message': '–ù–µ—Ç –∫–ª—É–±–æ–≤.'}); return
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑—Ä–∏—Ç–µ–ª–µ–π ---
            active_games[room_id] = {'game': game, 'turn_id': None, 'pause_id': None, 'skip_votes': set(), 'last_round_end_reason': None, 'spectators': []}
            remove_player_from_lobby(sid); broadcast_lobby_stats()
            print(f"[GAME] {nickname} –Ω–∞—á–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ö–æ–º–Ω–∞—Ç–∞: {room_id}. –ö–ª—É–±–æ–≤: {game.num_rounds}")
            start_game_loop(room_id)
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–ª–æ {nickname}: {e}"); leave_room(room_id)
            if room_id in active_games: del active_games[room_id]; add_player_to_lobby(sid)
            emit('start_game_fail', {'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'})
            broadcast_lobby_stats() # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å

@socketio.on('create_game')
def handle_create_game(data):
    sid, nickname, settings = request.sid, data.get('nickname'), data.get('settings')
    if not nickname: print(f"[ERROR] –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç {sid}"); return
    if is_player_busy(sid): print(f"[SECURITY] {nickname} ({sid}) –∑–∞–Ω—è—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."); return
    try: temp_game = GameState({'nickname': nickname}, all_leagues_data, mode='pvp', settings=settings)
    except Exception as e: print(f"[ERROR] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {nickname}: {e}"); emit('create_game_fail', {'message': '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.'}); return
    if temp_game.num_rounds < 3: print(f"[ERROR] {nickname} ({sid}) pvp < 3 –∫–ª—É–±–æ–≤ ({temp_game.num_rounds})."); emit('create_game_fail', {'message': '–ú–∏–Ω. 3 –∫–ª—É–±–∞.'}); return
    room_id = str(uuid.uuid4()); join_room(room_id); open_games[room_id] = {'creator': {'sid': sid, 'nickname': nickname}, 'settings': settings}
    remove_player_from_lobby(sid); print(f"[LOBBY] {nickname} ({sid}) —Å–æ–∑–¥–∞–ª {room_id}. –ö–ª—É–±–æ–≤: {temp_game.num_rounds}, –¢–ë: {settings.get('time_bank', 90)}")
    emit_lobby_update() # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏ –¥–ª—è –≤—Å–µ—Ö

@socketio.on('cancel_game')
def handle_cancel_game(data=None): # data=None —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–¥–∞
    sid = data.get('sid') if data else request.sid # –ü–æ–ª—É—á–∞–µ–º sid –∏–∑ data –∏–ª–∏ request
    room_to_delete = next((rid for rid, g in open_games.items() if g['creator']['sid'] == sid), None)
    if room_to_delete:
        leave_room(room_to_delete, sid=sid); del open_games[room_to_delete]; add_player_to_lobby(sid)
        print(f"[LOBBY] –°–æ–∑–¥–∞—Ç–µ–ª—å {sid} –æ—Ç–º–µ–Ω–∏–ª –∏–≥—Ä—É {room_to_delete}.")
        emit_lobby_update() # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏ –¥–ª—è –≤—Å–µ—Ö

@socketio.on('join_game')
def handle_join_game(data):
    joiner_sid, joiner_nickname, creator_sid = request.sid, data.get('nickname'), data.get('creator_sid')
    if not joiner_nickname or not creator_sid: print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä. join: {data} –æ—Ç {joiner_sid}"); return
    if is_player_busy(joiner_sid): print(f"[SECURITY] {joiner_nickname} ({joiner_sid}) –∑–∞–Ω—è—Ç, join –æ—Ç–∫–ª–æ–Ω–µ–Ω."); return
    room_id_to_join = next((rid for rid, g in open_games.items() if g['creator']['sid'] == creator_sid), None)
    if not room_id_to_join: print(f"[LOBBY] {joiner_nickname} join –∫ {creator_sid} –Ω–µ –Ω–∞–π–¥–µ–Ω."); emit('join_game_fail', {'message': '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'}); return
    game_to_join = open_games.pop(room_id_to_join); emit_lobby_update()
    creator_info = game_to_join['creator']
    if creator_info['sid'] == joiner_sid: print(f"[SECURITY] {joiner_nickname} join –∫ —Å–≤–æ–µ–π –∏–≥—Ä–µ {room_id_to_join}."); open_games[room_id_to_join] = game_to_join; emit_lobby_update(); return
    p1_info_full, p2_info_full = {'sid': creator_info['sid'], 'nickname': creator_info['nickname']}, {'sid': joiner_sid, 'nickname': joiner_nickname}
    join_room(room_id_to_join, sid=p2_info_full['sid']); remove_player_from_lobby(p2_info_full['sid'])
    try:
        game = GameState(p1_info_full, all_leagues_data, player2_info=p2_info_full, mode='pvp', settings=game_to_join['settings'])
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑—Ä–∏—Ç–µ–ª–µ–π ---
        active_games[room_id_to_join] = {'game': game, 'turn_id': None, 'pause_id': None, 'skip_votes': set(), 'last_round_end_reason': None, 'spectators': []}
        broadcast_lobby_stats(); emit_lobby_update() # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å—Ç–∞—Ç—ã, –∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
        print(f"[GAME] –°—Ç–∞—Ä—Ç PvP: {p1_info_full['nickname']} vs {p2_info_full['nickname']}. –ö–æ–º–Ω–∞—Ç–∞: {room_id_to_join}. –ö–ª—É–±–æ–≤: {game.num_rounds}")
        start_game_loop(room_id_to_join)
    except Exception as e:
         print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PvP {room_id_to_join}: {e}"); leave_room(room_id_to_join, sid=p1_info_full['sid']); leave_room(room_id_to_join, sid=p2_info_full['sid'])
         if room_id_to_join in active_games: del active_games[room_id_to_join]; add_player_to_lobby(p1_info_full['sid']); add_player_to_lobby(p2_info_full['sid'])
         emit('join_game_fail', {'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'}, room=p1_info_full['sid']); emit('join_game_fail', {'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'}, room=p2_info_full['sid'])
         broadcast_lobby_stats(); emit_lobby_update()

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π ---
@socketio.on('join_as_spectator')
def handle_join_as_spectator(data):
    sid, nickname, room_id = request.sid, data.get('nickname'), data.get('roomId')
    if not nickname or not room_id: print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä. spectate: {data} –æ—Ç {sid}"); return
    if is_player_busy(sid): print(f"[SECURITY] {nickname} ({sid}) –∑–∞–Ω—è—Ç, spectate –æ—Ç–∫–ª–æ–Ω–µ–Ω."); emit('spectate_fail', {'message': '–í—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã.'}); return
    game_session = active_games.get(room_id)
    if not game_session: print(f"[SPECTATOR] –ò–≥—Ä–∞ {room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {nickname}."); emit('spectate_fail', {'message': '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'}); return

    # --- –ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã ---
    my_open_game_id = next((rid for rid, g in open_games.items() if g['creator']['sid'] == sid), None)
    if my_open_game_id:
        print(f"[SPECTATOR] {nickname} ({sid}) –∑–∞—Ö–æ–¥–∏—Ç –∑—Ä–∏—Ç–µ–ª–µ–º, –æ—Ç–º–µ–Ω—è—è —Å–≤–æ—é –∏–≥—Ä—É {my_open_game_id}.")
        handle_cancel_game({'sid': sid}) # –í—ã–∑—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É —Å sid –∑—Ä–∏—Ç–µ–ª—è
    # --- ---

    join_room(room_id, sid=sid)
    if 'spectators' not in game_session: game_session['spectators'] = []
    game_session['spectators'].append({'sid': sid, 'nickname': nickname})
    remove_player_from_lobby(sid) # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–±–±–∏
    print(f"[SPECTATOR] {nickname} ({sid}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ {room_id}.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–æ–≤–æ–º—É –∑—Ä–∏—Ç–µ–ª—é
    emit('round_started', get_game_state_for_client(game_session, room_id)) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º round_started, —Ç.–∫. –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö.
    emit('spectate_success', {'roomId': room_id}) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑—Ä–∏—Ç–µ–ª—é

    broadcast_spectator_update(room_id) # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ –∑—Ä–∏—Ç–µ–ª—è—Ö –¥–ª—è –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
    broadcast_lobby_stats() # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –ª–æ–±–±–∏
    emit_lobby_update() # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã –≤ –ª–æ–±–±–∏

@socketio.on('leave_as_spectator')
def handle_leave_as_spectator(data):
    sid, room_id = request.sid, data.get('roomId')
    game_session = active_games.get(room_id)
    if not game_session: print(f"[ERROR] –ü–æ–ø—ã—Ç–∫–∞ —É–π—Ç–∏ –∏–∑ –Ω–µ—Å—É—â. –∏–≥—Ä—ã {room_id} –∑—Ä–∏—Ç–µ–ª–µ–º {sid}"); return

    initial_spectators = game_session.get('spectators', [])
    game_session['spectators'] = [spec for spec in initial_spectators if spec['sid'] != sid]

    if len(initial_spectators) > len(game_session['spectators']):
        leave_room(room_id, sid=sid)
        add_player_to_lobby(sid) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ª–æ–±–±–∏
        print(f"[SPECTATOR] –ó—Ä–∏—Ç–µ–ª—å {sid} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É {room_id}.")
        broadcast_spectator_update(room_id)
        broadcast_lobby_stats()
        emit_lobby_update()
    else:
        print(f"[ERROR] –ó—Ä–∏—Ç–µ–ª—å {sid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ {room_id} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã—Ö–æ–¥–∞.")
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---


@socketio.on('submit_guess')
def handle_submit_guess(data):
    room_id, guess, sid = data.get('roomId'), data.get('guess'), request.sid
    game_session = active_games.get(room_id)
    if not game_session: print(f"[ERROR][GUESS] {sid} guess –¥–ª—è –Ω–µ —Å—É—â. {room_id}"); return
    game = game_session['game']
    if game.players[game.current_player_index].get('sid') != sid: print(f"[SECURITY][GUESS] {sid} –Ω–µ –µ–≥–æ —Ö–æ–¥ –≤ {room_id}."); return

    result = game.process_guess(guess); current_player_nick = game.players[game.current_player_index]['nickname']
    print(f"[GUESS] {room_id}: {current_player_nick} '{guess}' -> {result['result']}")

    if result['result'] in ['correct', 'correct_typo']:
        time_spent = time.time() - game.turn_start_time; game_session['turn_id'] = None
        game.time_banks[game.current_player_index] -= time_spent
        if game.time_banks[game.current_player_index] < 0: print(f"[TIMEOUT] {room_id}: {current_player_nick} —É–≥–∞–¥–∞–ª, –Ω–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ."); on_timer_end(room_id); return

        game.add_named_player(result['player_data'], game.current_player_index)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        emit('guess_result', {'result': result['result'], 'corrected_name': result['player_data']['full_name']}, room=room_id) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º

        if game.is_round_over():
            print(f"[ROUND_END] {room_id}: –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω (–≤—Å–µ –Ω–∞–∑–≤–∞–Ω—ã). –ù–∏—á—å—è 0.5-0.5"); game_session['last_round_end_reason'] = 'completed'
            if game.mode == 'pvp': game.scores[0] += 0.5; game.scores[1] += 0.5; game_session['last_round_winner_index'] = 'draw'
            show_round_summary_and_schedule_next(room_id)
        else:
            start_next_human_turn(room_id) # –≠—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç turn_updated –≤—Å–µ–º
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–≥–∞–¥—ã–≤–∞—é—â–µ–º—É
        emit('guess_result', {'result': result['result']})

@socketio.on('surrender_round')
def handle_surrender(data):
    room_id, sid = data.get('roomId'), request.sid
    game_session = active_games.get(room_id)
    if not game_session: print(f"[ERROR][SURRENDER] {sid} surrender –¥–ª—è –Ω–µ —Å—É—â. {room_id}"); return
    game = game_session['game']
    if game.players[game.current_player_index].get('sid') != sid: print(f"[SECURITY][SURRENDER] {sid} –Ω–µ –µ–≥–æ —Ö–æ–¥ –≤ {room_id}."); return
    game_session['turn_id'] = None; game_session['last_round_end_reason'] = 'surrender'
    surrendering_player_nick = game.players[game.current_player_index]['nickname']
    print(f"[ROUND_END] {room_id}: –ò–≥—Ä–æ–∫ {surrendering_player_nick} —Å–¥–∞–ª—Å—è.");
    on_timer_end(room_id) # –≠—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç timer_expired –≤—Å–µ–º

@app.route('/')
def index(): return render_template('index.html')

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Dockerfile